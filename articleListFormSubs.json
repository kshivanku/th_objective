{
  "id": "feed/http://www.alistapart.com/site/rss",
  "title": "A List Apart: The Full Feed",
  "direction": "ltr",
  "updated": 1515512322180,
  "alternate": [
    {
      "href": "https://alistapart.com",
      "type": "text/html"
    }
  ],
  "items": [
    {
      "id": "0bf8Wkb5S/MXDZ8MKe9TgFwwRoJesPfDJbK2Ml9Zeos=_160db92d884:448bd1:b64595cf",
      "keywords": [
        "Code, JavaScript"
      ],
      "originId": "http://alistapart.com/article/why-mutation-can-be-scary",
      "fingerprint": "40b21c2",
      "title": "Why Mutation Can Be Scary",
      "published": 1515510000000,
      "crawled": 1515512322180,
      "canonical": [
        {
          "href": "http://alistapart.com/article/why-mutation-can-be-scary",
          "type": "text/html"
        }
      ],
      "origin": {
        "streamId": "feed/http://www.alistapart.com/site/rss",
        "title": "A List Apart: The Full Feed",
        "htmlUrl": "https://alistapart.com"
      },
      "author": "by Zell Liew",
      "alternate": [
        {
          "href": "http://feedproxy.google.com/~r/alistapart/main/~3/nLBGPZ8mE_s/why-mutation-can-be-scary",
          "type": "text/html"
        }
      ],
      "summary": {
        "content": "<p><b>A note from the editors:</b> This article contain sample lessons from <a href=\"https://learnjavascript.today/\">Learn JavaScript</a>, a course that helps you learn JavaScript to build real-world components from scratch.</p><p>To <i>mutate</i> means to change in form or nature. Something that’s mutable can be changed, while something that’s immutable cannot be changed. To understand mutation, think of the X-Men. In X-Men, people can suddenly gain powers. The problem is, you don’t know when these powers will emerge. Imagine your friend turns blue and grows fur all of a sudden; that’d be scary, wouldn’t it?</p>\n<p>In JavaScript, the same problem with mutation applies. If your code is mutable, you might change (and break) something without knowing.</p>\n<h2>Objects are mutable in JavaScript</h2>\n<p>In JavaScript, you can add properties to an object. When you do so after instantiating it, the object is changed permanently. It mutates, like how an X-Men member mutates when they gain powers.<br>\n<br>\nIn the example below, the variable <code>egg</code> mutates once you add the <code>isBroken</code> property to it. We say that objects (like <code>egg</code>) are mutable (have the ability to <i>mutate</i>).</p>\n<pre><code>const egg = { name: &quot;Humpty Dumpty&quot; };\negg.isBroken = false;\n\nconsole.log(egg);\n// {\n//   name: &quot;Humpty Dumpty&quot;,\n//   isBroken: false\n// }</code></pre>\n<p>Mutation is pretty normal in JavaScript. You use it all the time.</p>\n<p><strong>Here’s when mutation becomes scary.</strong></p>\n<p>Let’s say you create a constant variable called <code>newEgg</code> and assign <code>egg</code> to it. Then you want to change the name of <code>newEgg</code> to something else.</p>\n<pre><code>const egg = { name: &quot;Humpty Dumpty&quot; };\n\nconst newEgg = egg;\nnewEgg.name = &quot;Errr ... Not Humpty Dumpty&quot;;</code></pre>\n<p>When you change (mutate) <code>newEgg</code>, did you know <code>egg</code> gets mutated automatically?</p>\n<pre><code>console.log(egg);\n// {\n//   name: &quot;Errr ... Not Humpty Dumpty&quot;\n// }</code></pre>\n<p>The example above illustrates why mutation can be scary—when you change one piece of your code, another piece can change somewhere else without your knowing. As a result, you’ll get bugs that are hard to track and fix.</p>\n<p>This weird behavior happens because objects are passed by reference in JavaScript.</p>\n<h3>Objects are passed by reference in JavaScript</h3>\n<p>To understand what “passed by reference” means, first you have to understand that each object has a unique identity in JavaScript. When you assign an object to a variable, you link the variable to the identity of the object (that is, you pass it by reference) rather than assigning the variable the object’s value directly. This is why when you compare two different objects, you get <code>false</code> even if the objects have the same value.</p>\n<pre><code>console.log({} === {}); // false</code></pre>\n<p>When you assign <code>egg</code> to <code>newEgg</code>, <code>newEgg</code> points to the same object as <code>egg</code>. Since <code>egg</code> and <code>newEgg</code> are the same thing, when you change <code>newEgg</code>, <code>egg</code> gets changed automatically.</p>\n<pre><code>console.log(egg === newEgg); // true</code></pre>\n<p>Unfortunately, you don’t want <code>egg</code> to change along with <code>newEgg</code> most of the time, since it causes your code to break when you least expect it. So how do you prevent objects from mutating? Before you understand how to prevent objects from mutating, you need to know what’s immutable in JavaScript.</p>\n<h2>Primitives are immutable in JavaScript</h2>\n<p>In JavaScript, primitives (String, Number, Boolean, Null, Undefined, and Symbol) are immutable; you cannot change the structure (add properties or methods) of a primitive. Nothing will happen even if you try to add properties to a primitive.</p>\n<pre><code>const egg = &quot;Humpty Dumpty&quot;;\negg.isBroken = false;\n\nconsole.log(egg); // Humpty Dumpty\nconsole.log(egg.isBroken); // undefined</code></pre>\n<h2><code>const</code> doesn’t grant immutability</h2>\n<p>Many people think that variables declared with <code>const</code> are immutable. That’s an incorrect assumption.</p>\n<p>Declaring a variable with <code>const</code> doesn’t make it immutable, it prevents you from assigning another value to it.</p>\n<pre><code>const myName = &quot;Zell&quot;;\nmyName = &quot;Triceratops&quot;;\n// ERROR</code></pre>\n<p>When you declare an object with <code>const</code>, you’re still allowed to mutate the object. In the <code>egg</code> example above, even though <code>egg</code> is created with <code>const</code>, <code>const</code> doesn’t prevent <code>egg</code> from mutating.</p>\n<pre><code>const egg = { name: &quot;Humpty Dumpty&quot; };\negg.isBroken = false;\n\nconsole.log(egg);\n// {\n//   name: &quot;Humpty Dumpty&quot;,\n//   isBroken: false\n// }</code></pre>\n<h2>Preventing objects from mutating</h2>\n<p>You can use <code>Object.assign</code> and assignment to prevent objects from mutating.</p>\n<h3><code>Object.assign</code></h3>\n<p><code>Object.assign</code> lets you combine two (or more) objects together into a single one. It has the following syntax:</p>\n<pre><code>const newObject = Object.assign(object1, object2, object3, object4);</code></pre>\n<p><code>newObject</code> will contain properties from all of the objects you’ve passed into <code>Object.assign</code>.</p>\n<pre><code>const papayaBlender = { canBlendPapaya: true };\nconst mangoBlender = { canBlendMango: true };\n\nconst fruitBlender = Object.assign(papayaBlender, mangoBlender);\n\nconsole.log(fruitBlender);\n// {\n//   canBlendPapaya: true,\n//   canBlendMango: true\n// }</code></pre>\n<p>If two conflicting properties are found, the property in a later object overwrites the property in an earlier object (in the <code>Object.assign</code> parameters).</p>\n<pre><code>const smallCupWithEar = {\n  volume: 300,\n  hasEar: true\n};\n\nconst largeCup = { volume: 500 };\n\n// In this case, volume gets overwritten from 300 to 500\nconst myIdealCup = Object.assign(smallCupWithEar, largeCup);\n\nconsole.log(myIdealCup);\n// {\n//   volume: 500,\n//   hasEar: true\n// }</code></pre>\n<p><strong>But beware! When you combine two objects with <code>Object.assign</code>, the first object gets mutated. Other objects don’t get mutated.</strong></p>\n<pre><code>console.log(smallCupWithEar);\n// {\n//   volume: 500,\n//   hasEar: true\n// }\n\nconsole.log(largeCup);\n// {\n//   volume: 500\n// }</code></pre>\n<h3>Solving the <code>Object.assign</code> mutation problem</h3>\n<p>You can pass a new object as your first object to prevent existing objects from mutating. You’ll still mutate the first object though (the empty object), but that’s OK since this mutation doesn’t affect anything else.</p>\n<pre><code>const smallCupWithEar = {\n  volume: 300,\n  hasEar: true\n};\n\nconst largeCup = {\n  volume: 500\n};\n\n// Using a new object as the first argument\nconst myIdealCup = Object.assign({}, smallCupWithEar, largeCup);</code></pre>\n<p>You can mutate your new object however you want from this point. It doesn’t affect any of your previous objects.</p>\n<pre><code>myIdealCup.picture = &quot;Mickey Mouse&quot;;\nconsole.log(myIdealCup);\n// {\n//   volume: 500,\n//   hasEar: true,\n//   picture: &quot;Mickey Mouse&quot;\n// }\n\n// smallCupWithEar doesn't get mutated\nconsole.log(smallCupWithEar); // { volume: 300, hasEar: true }\n\n// largeCup doesn't get mutated\nconsole.log(largeCup); // { volume: 500 }</code></pre>\n<h3>But <code>Object.assign</code> copies references to objects</h3>\n<p>The problem with <code>Object.assign</code> is that it performs a <i>shallow merge</i>—it copies properties directly from one object to another. When it does so, it also copies references to any objects.</p>\n<p>Let’s explain this statement with an example.</p>\n<p>Suppose you buy a new sound system. The system allows you to declare whether the power is turned on. It also lets you set the volume, the amount of bass, and other options.</p>\n<pre><code>const defaultSettings = {\n  power: true,\n  soundSettings: {\n    volume: 50,\n    bass: 20,\n    // other options\n  }\n};</code></pre>\n<p>Some of your friends love loud music, so you decide to create a preset that’s guaranteed to wake your neighbors when they’re asleep.</p>\n<pre><code>const loudPreset = {\n  soundSettings: {\n    volume: 100\n  }\n};</code></pre>\n<p>Then you invite your friends over for a party. To preserve your existing presets, you attempt to combine your loud preset with the default one.</p>\n<pre><code>const partyPreset = Object.assign({}, defaultSettings, loudPreset);</code></pre>\n<p>But <code>partyPreset</code> sounds weird. The volume is loud enough, but the bass is non-existent. When you inspect <code>partyPreset</code>, you’re surprised to find that there’s no bass in it!</p>\n<pre><code>console.log(partyPreset);\n// {\n//   power: true,\n//   soundSettings: {\n//     volume: 100\n//   }\n// }</code></pre>\n<p>This happens because JavaScript copies over the reference to the <code>soundSettings</code> object. Since both <code>defaultSettings</code> and <code>loudPreset</code> have a <code>soundSettings</code> object, the one that comes later gets copied into the new object.</p>\n<p>If you change <code>partyPreset</code>, <code>loudPreset</code> will mutate accordingly—evidence that the reference to <code>soundSettings</code> gets copied over.</p>\n<pre><code>partyPreset.soundSettings.bass = 50;\n\nconsole.log(loudPreset);\n// {\n//   soundSettings: {\n//     volume: 100,\n//     bass: 50\n//   }\n// }\n</code></pre>\n<p>Since <code>Object.assign</code> performs a shallow merge, you need to use another method to merge objects that contain nested properties (that is, objects within objects).</p>\n<p>Enter assignment.</p>\n<h3>assignment</h3>\n<p><a href=\"https://github.com/bevacqua/assignment/blob/master/assignment.js\">assignment</a> is a small library made by <a href=\"https://twitter.com/nzgb\">Nicolás Bevacqua</a> from <a href=\"https://ponyfoo.com/\">Pony Foo</a>, which is a great source for JavaScript knowledge. It helps you perform a deep merge without having to worry about mutation. Aside from the method name, the syntax is the same as <code>Object.assign</code>.</p>\n<pre><code>// Perform a deep merge with assignment\nconst partyPreset = assignment({}, defaultSettings, loudPreset);\n\nconsole.log(partyPreset);\n// {\n//   power: true,\n//   soundSettings: {\n//     volume: 100,\n//     bass: 20\n//   }\n// }</code></pre>\n<p>assignment copies over values of all nested objects, which prevents your existing objects from getting mutated.</p>\n<p>If you try to change any property in <code>partyPreset.soundSettings</code> now, you’ll see that <code>loudPreset</code> remains as it was.</p>\n<pre><code>partyPreset.soundSettings.bass = 50;\n\n// loudPreset doesn't get mutated\nconsole.log(loudPreset);\n// {\n//   soundSettings {\n//     volume: 100\n//   }\n// }</code></pre>\n<p>assignment is just one of many libraries that help you perform a deep merge. Other libraries, including <a href=\"https://lodash.com/docs#assign\">lodash.assign</a> and <a href=\"https://www.npmjs.com/package/merge-options\">merge-options</a>, can help you do it, too. Feel free to choose from any of these libraries.</p>\n<h3>Should you always use assignment over <code>Object.assign</code>?</h3>\n<p>As long as you know how to prevent your objects from mutating, you can use <code>Object.assign</code>. There’s no harm in using it as long as you know how to use it properly.</p>\n<p>However, if you need to assign objects with nested properties, always prefer a deep merge over <code>Object.assign</code>.</p>\n<h3>Ensuring objects don’t mutate</h3>\n<p>Although the methods I mentioned can help you prevent objects from mutating, they don’t guarantee that objects don’t mutate. If you made a mistake and used <code>Object.assign</code> for a nested object, you’ll be in for deep trouble later on.</p>\n<p>To safeguard yourself, you might want to guarantee that objects don’t mutate at all. To do so, you can use libraries like <a href=\"https://facebook.github.io/immutable-js/\">ImmutableJS</a>. This library throws an error whenever you attempt to mutate an object.</p>\n<p>Alternatively, you can use <code>Object.freeze</code> and deep-freeze. These two methods fail silently (they don’t throw errors, but they also don’t mutate the objects).</p>\n<h3><code>Object.freeze</code> and deep-freeze</h3>\n<p><code>Object.freeze</code> prevents direct properties of an object from changing.</p>\n<pre><code>const egg = {\n  name: &quot;Humpty Dumpty&quot;,\n  isBroken: false\n};\n\n// Freezes the egg\nObject.freeze(egg);\n\n// Attempting to change properties will silently fail\negg.isBroken = true;\n\nconsole.log(egg); // { name: &quot;Humpty Dumpty&quot;, isBroken: false }</code></pre>\n<p>But it doesn’t help when you mutate a deeper property like <code>defaultSettings.soundSettings.base</code>.</p>\n<pre><code>const defaultSettings = {\n  power: true,\n  soundSettings: {\n    volume: 50,\n    bass: 20\n  }\n};\nObject.freeze(defaultSettings);\ndefaultSettings.soundSettings.bass = 100;\n\n// soundSettings gets mutated nevertheless\nconsole.log(defaultSettings);\n// {\n//   power: true,\n//   soundSettings: {\n//     volume: 50,\n//     bass: 100\n//   }\n// }</code></pre>\n<p>To prevent a deep mutation, you can use a library called <a href=\"https://www.npmjs.com/package/deep-freeze\">deep-freeze</a>, which recursively calls <code>Object.freeze</code> on all objects.</p>\n<pre><code>const defaultSettings = {\n  power: true,\n  soundSettings: {\n    volume: 50,\n    bass: 20\n  }\n};\n\n// Performing a deep freeze (after including deep-freeze in your code per instructions on npm)\ndeepFreeze(defaultSettings);\n\n// Attempting to change deep properties will fail silently\ndefaultSettings.soundSettings.bass = 100;\n\n// soundSettings doesn't get mutated anymore\nconsole.log(defaultSettings);\n// {\n//   power: true,\n//   soundSettings: {\n//     volume: 50,\n//     bass: 20\n//   }\n// }</code></pre>\n<h2>Don’t confuse reassignment with mutation</h2>\n<p>When you reassign a variable, you change what it points to. In the following example, <code>a</code> is changed from <code>11</code> to <code>100</code>.</p>\n<pre><code>let a = 11;\na = 100;</code></pre>\n<p>When you mutate an object, it gets changed. The reference to the object stays the same.</p>\n<pre><code>const egg = { name: &quot;Humpty Dumpty&quot; };\negg.isBroken = false;</code></pre>\n<h2>Wrapping up</h2>\n<p>Mutation is scary because it can cause your code to break without your knowing about it. Even if you suspect the cause of breakage is a mutation, it can be hard for you to pinpoint the code that created the mutation. So the best way to prevent code from breaking unknowingly is to make sure your objects don’t mutate from the get-go.</p>\n<p>To prevent objects from mutating, you can use libraries like <a href=\"https://facebook.github.io/immutable-js/\">ImmutableJS</a> and <a href=\"https://github.com/swannodette/mori\">Mori.js</a>, or use <code>Object.assign</code> and <code>Object.freeze</code>.</p>\n<p>Take note that <code>Object.assign</code> and <code>Object.freeze</code> can only prevent direct properties from mutating. If you need to prevent multiple layers of objects from mutating, you’ll need libraries like <a href=\"https://github.com/bevacqua/assignment/blob/master/assignment.js\">assignment</a> and <a href=\"https://www.npmjs.com/package/deep-freeze\">deep-freeze</a>.</p><img width=\"1\" alt=\"\" src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/nLBGPZ8mE_s\" height=\"1\">",
        "direction": "ltr"
      },
      "unread": false,
      "categories": [
        {
          "id": "user/b26d0114-b165-4328-b921-8bfda7fbc193/category/design-dev",
          "label": "design-dev"
        }
      ],
      "tags": [
        {
          "id": "user/b26d0114-b165-4328-b921-8bfda7fbc193/tag/global.read",
          "label": ""
        }
      ],
      "engagement": 12,
      "engagementRate": 0.32
    },
    {
      "id": "0bf8Wkb5S/MXDZ8MKe9TgFwwRoJesPfDJbK2Ml9Zeos=_160c1ba7243:a606bf:b64595cf",
      "keywords": [
        "User Experience, User Research"
      ],
      "originId": "http://alistapart.com/article/discovery-on-a-budget-part-i",
      "fingerprint": "f692d0b0",
      "title": "Discovery on a Budget: Part I",
      "published": 1515078000000,
      "crawled": 1515078709827,
      "canonical": [
        {
          "href": "http://alistapart.com/article/discovery-on-a-budget-part-i",
          "type": "text/html"
        }
      ],
      "origin": {
        "streamId": "feed/http://www.alistapart.com/site/rss",
        "title": "A List Apart: The Full Feed",
        "htmlUrl": "https://alistapart.com"
      },
      "author": "by Meg Dickey-Kurdziolek",
      "alternate": [
        {
          "href": "http://feedproxy.google.com/~r/alistapart/main/~3/JqxgSOxUmH8/discovery-on-a-budget-part-i",
          "type": "text/html"
        }
      ],
      "summary": {
        "content": "<p>If you crack open any design textbook, you’ll see some depiction of the design cycle: discover, ideate, create, evaluate, and repeat. Whenever we bring on a new client or start working on a new feature, we start at the top of the wheel with discover (or discovery). It is the time in the project when we define what problem we are trying to solve and what our first approach at solving it should be. </p>\n<figure>\n<img alt=\"A flowchart showing Discover, leading to Ideate, leading to Create, leading to Evaluate, which leads back to Discover\" src=\"http://alistapart.com/d/discovery-on-a-budget-1/fig1.png\">\n<figcaption>Ye olde design cycle</figcaption>\n</figure>\n<p>We commonly talk about discovery at the start of a sprint cycle at an established business, where there are things like budgets, product teams, and existing customers. The discovery process may include interviewing stakeholders or pouring over existing user data. And we always exit the discovery phase with some sort of idea to move forward with. </p>\n<p>However, discovery is inherently different when you work at a nonprofit, startup, or fledgling small business. It may be a design team of one (you), with zero dollars to spend, and only a handful of people aware the business even exists. There are no clients to interview and no existing data to examine. This may also be the case at large businesses when they want to test the waters on a new direction without overcommitting (or overspending). Whenever you are constrained on budget, data, and stakeholders, you need to be flexible and crafty in how you conduct discovery research. But you can’t skimp on rigor and thoroughness. If the idea you exit the discovery phase with isn’t any good, your big launch could turn out to be a business-ending flop. </p>\n<p>In this article I’ll take you through a discovery research cycle, but apply it towards a (fictitious) startup idea. I’ll introduce strategies for conducting discovery research with no budget, existing user data, or resources to speak of. And I’ll show how the research shapes the business going forward. </p>\n<h2>Write up the problem hypothesis</h2>\n<p>An awful lot of ink (virtual or otherwise) has been spent on proclaiming we should all, “<a href=\"http://www.wired.co.uk/article/waze-uri-levine\">fall in love with the problem, not the solution</a>.” And it has been ink spent well. When it comes to product building, a problem-focused philosophy is the cornerstone of any user-centric business. </p>\n<p>But how, exactly, do you know when you have a problem worth solving? If you work at a large, established business you may have user feedback and data pointing you like flashing arrows on a well-marked road towards a problem worth solving. However, if you are launching a startup, or work at a larger business venturing into new territory, it can be more like hiking through the woods and searching for the next blaze mark on the trail. Your ideas are likely based on personal experiences and gut instincts. </p>\n<p>When your ideas are based on personal experiences, assumptions, and instincts, it’s important to realize they need a higher-than-average level of tire-kicking. You need to evaluate the question “Do I have a problem worth solving?” with a higher level of rigor than you would at a company with budget to spare and a wealth of existing data. You need to take all of your ideas and assumptions and examine them thoroughly. And the best way to examine your ideas and categorize your assumptions is with a hypothesis. </p>\n<p>As the dictionary describes, a <i>hypothesis</i> is “a supposition or proposed explanation made on the basis of limited evidence as a starting point for further investigation.” That also serves as a good description of why we do discovery research in the first place. We may have an idea that there is a problem worth solving, but we don’t yet know the scope or critical details. Articulating our instincts, ideas, and assumptions as a <i>problem hypothesis</i> lays a foundation for the research moving forward.</p>\n<p>Here is a general formula you can use to write a problem hypothesis:</p>\n<figure><blockquote>Because [assumptions and gut instincts about the problem], users are [in some undesirable state]. They need [solution idea].</blockquote></figure>\n<p>For this article, I decided to “launch” a fictitious (and overly ambitious) startup as an example. Here is the problem hypothesis I wrote for my startup:</p>\n<figure><blockquote>Because their business model relies on advertising, social media tools like Facebook are deliberately designed to “hook” users and make them addicted to the service. Users are unhappy with this and would rather have a healthier relationship with social media tools. They would be willing to pay for a social media service that was designed with mental health in mind.</blockquote></figure>\n<p>You can see in this example that my assumptions are:</p>\n<ul>\n<li>Users feel that social media sites like Facebook are addictive.</li>\n<li>Users don’t like to be addicted to social media.</li>\n<li>Users would be willing to pay for a non-addictive Facebook replacement. </li>\n</ul>\n<p>These are the assumptions I’ll be researching and testing throughout the discovery process. If I find through my research that I cannot readily affirm these assumptions, it means I might not be ready to take on Mr. Zuckerberg just yet. </p>\n<p>The benefit of articulating our assumptions in the form of a hypothesis is that it provides something concrete to talk about, refer to, and test. The whole product team can be involved in forming the initial problem hypothesis, and you can refer back to it throughout the discovery process. Once we’ve completed the research and analyzed the results, we can edit the hypothesis to reflect our new understanding of our users and the problems we want to solve. </p>\n<p>Now that we’ve articulated a problem hypothesis, it is time to figure out our research plan. In the following two sections, I’ll cover the research method I recommend the most for new ventures, as well as strategies for recruiting participants on a budget. </p>\n<h2>A method that is useful in all phases of design: interviews</h2>\n<p>In my career as a user researcher, I have used all sorts of methods. I’ve done A/B testing, eye tracking, Wizard of Oz testing, think-alouds, contextual inquiries, and guerilla testing. But the one research method I utilize the most, and that I believe provides the most “bang for the buck,” is user interviews. </p>\n<p>User interviews are relatively inexpensive to conduct. You don’t need to travel to a client site and you don’t need a fortune’s worth of equipment. If you have access to a phone, you can conduct an interview with participants all around the world. Yet interviews provide a wealth of information and can be used in every phase of research and design. Interviews are especially useful in discovery, because it is a method that is adaptable. As you learn more about the problem you are trying to solve, you can adapt your interview protocol to match. </p>\n<p>To be clear, your interviewees will <em>not</em> tell you:</p>\n<ul>\n<li>what to build;</li>\n<li>or how to build it.</li>\n</ul>\n<p>But they absolutely <em>can</em> tell you:</p>\n<ul>\n<li>what problem they have;</li>\n<li>how they feel about it;</li>\n<li>and what the value of a solution would mean to them.</li>\n</ul>\n<p>And if you know the problem, how users feels about it, and the value of a solution, you are well on your way to designing the right product. </p>\n<p>The challenge of conducting a good user interview is making sure you ask the questions that elicit that information. Here are a couple tips:</p>\n<p><b>Tip 1: always ask the following two questions:</b></p>\n<ul>\n<li>“What do you like about [blank]?”</li>\n<li>“What do you dislike about [blank]?”</li>\n</ul>\n<p>… where you fill “[blank]” with whatever domain your future product will improve.</p>\n<p>Your objective is to gain an understanding of all aspects of the problem your potential customers face—the bad <em>and</em> the good. One common mistake is to spend too much time investigating what’s wrong with the current state of affairs. Naturally, you want your product to fix all the problems your customers face. However, you also need to preserve what currently works well, what is satisfying, or what is otherwise good about how users accomplish their goals currently. So it is important to ask about both in user interviews.</p>\n<p>For example, in my interviews I always asked, “What do you like about using Facebook?” And it wasn’t until my interview participant told me everything they enjoyed about Facebook that I would ask, “What do you dislike about using Facebook?”</p>\n<p><b>Tip 2: after (nearly) every response, ask them to say more.</b></p>\n<p>The goal of conducting interviews is to gain an exhaustive set of data to review and consider moving forward. That means you don’t want your participants to discuss <em>one</em> thing they like and dislike, you want them to tell you <em>all</em> the things they like and dislike.</p>\n<p>Here is an example of how this played out in one of the interviews I conducted:</p>\n<figure>\n<blockquote>\n<p><b>Interviewer (Me)</b>: What do you like about using Facebook?</p>\n<p><b>Interviewee</b>: I like seeing people on there that I wouldn’t otherwise get a chance to see and catch up with in real life. I have moved a couple times so I have a lot of friends that I don’t see regularly. I also like seeing the people I know do well, even though I haven’t seen them since, maybe, high school. But I like seeing how their life has gone. I like seeing their kids. I like seeing their accomplishments. It’s also a little creepy because it’s a window into their life and we haven’t actually talked in forever. But I like staying connected.</p>\n<p><b>Interviewer (Me)</b>: What else do you like about it?</p>\n<p><b>Interviewee</b>: Um, well it’s also sort of a convenient way of keeping contacts. There have been a few times when I was able to message people and get in touch with people even when I don’t have their address or email in my phone. I could message them through Facebook.</p>\n<p><b>Interviewer (Me)</b>: Great. Is there anything else you like about it?</p>\n<p><b>Interviewee</b>: Let me think … well I also find cool stuff to do on the weekends there sometimes. They have an events feature. And businesses, or local places, will post events and there have been a couple times where I’ve gone to something cool. Like I found a cool movie festival once that way.</p>\n<p><b>Interviewer (Me)</b>: That seems cool. What else do you like about using Facebook?</p>\n<p><b>Interviewee</b>: Uh … that’s all I think I really use it for. I can’t really think of anything else. Mainly I use it just to keep in touch with people that I’ve met over the years.</p>\n</blockquote>\n</figure>\n<p>From this example you can see the first feature that popped into the interviewee’s mind was their ability to keep up with friends that they otherwise wouldn’t have much opportunity to connect with anymore. That is a feature that any Facebook replacement would have to replicate. However, if I hadn’t pushed the interviewee to think of even more features they like, I might have never uncovered an important secondary feature: convenient in-app messaging. In fact, six out of the eleven people I interviewed for this project said they liked Facebook Messenger. But not a single one of them mentioned that feature <em>first</em>. It only came up in conversation after I probed for more.</p>\n<p>As I continued to repeat my question, the interviewee thought of one more feature they liked: local event listings. (Five out of the eleven people I interviewed mentioned this feature.) But after that, the interviewee couldn’t think of any more features to discuss. You know you can move on to the next question in the interview when your participant starts to repeat themselves or bluntly tells you they have nothing else to say.</p>\n<h2>Recruit all around you, then document the bias</h2>\n<p>There are all sorts of ways to recruit participants for research. You can hire an agency or use a tool like UserTesting.com. But many of those paid-for options can be quite costly, and since we are working with a shoestring budget we have roughly zero dollars to spend on recruitment. We will have to be creative. </p>\n<figure>\n<img alt=\"Hey Friends. I have a little project I am working on that may turn into a startup pitch one day. To help me figure out whether I have an idea worth working on, I’d like to interview some folks about their use of Facebook and other social media. Would any of you be willing to do an interview with me? It would take ~15min and we would talk via Skype or Google Hangouts – your choice.\" src=\"http://alistapart.com/d/discovery-on-a-budget-1/fig2.png\">\n<figcaption>My post on Facebook to recruit volunteers. One volunteer decided to respond with a Hunger Games “I volunteer as tribute!” gif.\n</figcaption>\n</figure>\n<p>For my project, I decided to rely on the kindness of friends and strangers I could reach through Facebook. I posted one request for participants on my personal Facebook page, and another on the <a href=\"https://www.facebook.com/groups/free.code.camp.pittsburgh.pa/permalink/1666729846686471/\">local FreeCodeCamp page</a>. A day after I posted my request, twenty-five friends and five strangers volunteered. This type of participant recruitment method is called <i><a href=\"https://measuringu.com/random-sample/\">convenience sampling</a></i>, because I was recruiting participants that were conveniently accessible to me.</p>\n<p>Since my project involved talking to people about social media sites like Facebook, it was appropriate for my first attempt at recruiting to start on Facebook. I could be sure that everyone who saw my request uses Facebook in some form or fashion. However, like all convenience sampling, my recruitment method was biased. (I’ll explain how in just a bit.)</p>\n<p>Bias is something that we should try—whenever possible—to avoid. If we have access to more sophisticated recruitment methods, we should use them. However, when you have a tight budget, avoiding recruitment bias is virtually impossible. In this scenario, our goals should be to:</p>\n<ul>\n<li>mitigate bias as best we can;</li>\n<li>and document all the biases we see.</li>\n</ul>\n<p>For my project, I could mitigate some of the biases by using a few more recruitment methods. I could go to various neighborhoods and try to recruit participants off the street (i.e., guerilla testing). If I had a little bit of money to spend, I could hang out in various coffee shops and offer folks free coffee in exchange for ten-minute interviews. These recruitment methods also fall under the umbrella of convenience sampling, but by using a variety of methods I can mitigate some of the bias I would have from using just one of them.</p>\n<p>Also, it is always important to reflect on and document how your sampling method is biased. For my project, I wrote the following in my notes:</p>\n<p>All of the people I interviewed were connected to me in some way on Facebook. Many of them I know well enough to be “friends” with. All of them were around my age, many (but not all) worked in tech in some form or fashion, and all of them but one lived in the US.</p>\n<p>Documenting bias ensures that we won’t <em>forget</em> about the bias when it comes time to analyze and discuss the results.</p>\n<h2>Let’s keep this going</h2>\n<p>As the title suggests, this is just the first installment of a series of articles on the discovery process. In part two, I will analyze the results of my interviews, revise my problem hypothesis, and continue to work on my experimental startup. I will launch into another round of discovery research, but this time utilizing some different research methods, like A/B testing and fake-door testing. You can help me out by checking out this mock landing page for <a href=\"http://candor.network/\">Candor Network</a> (what I’ve named my fictitious startup) and taking the survey you see there.</p><img width=\"1\" alt=\"\" src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/JqxgSOxUmH8\" height=\"1\">",
        "direction": "ltr"
      },
      "visual": {
        "processor": "feedly-nikon-v3.1",
        "url": "http://alistapart.com/d/discovery-on-a-budget-1/fig1.png",
        "width": 480,
        "height": 480,
        "contentType": "image/png"
      },
      "unread": false,
      "categories": [
        {
          "id": "user/b26d0114-b165-4328-b921-8bfda7fbc193/category/design-dev",
          "label": "design-dev"
        }
      ],
      "tags": [
        {
          "id": "user/b26d0114-b165-4328-b921-8bfda7fbc193/tag/global.read",
          "label": ""
        }
      ],
      "engagement": 78,
      "engagementRate": 1.2
    },
    {
      "id": "0bf8Wkb5S/MXDZ8MKe9TgFwwRoJesPfDJbK2Ml9Zeos=_15f72eb9561:152c0de:626ab4cd",
      "keywords": [
        "Typography & Web Fonts"
      ],
      "originId": "http://alistapart.com/article/web-typography-tables",
      "fingerprint": "551123fd",
      "title": "Web Typography: Designing Tables to be Read, Not Looked At",
      "published": 1509455700000,
      "crawled": 1509461562721,
      "canonical": [
        {
          "href": "http://alistapart.com/article/web-typography-tables",
          "type": "text/html"
        }
      ],
      "origin": {
        "streamId": "feed/http://www.alistapart.com/site/rss",
        "title": "A List Apart: The Full Feed",
        "htmlUrl": "https://alistapart.com"
      },
      "author": "by Richard Rutter",
      "alternate": [
        {
          "href": "http://feedproxy.google.com/~r/alistapart/main/~3/TaASsGZR1Rg/web-typography-tables",
          "type": "text/html"
        }
      ],
      "summary": {
        "content": "<p><b>A note from the editors:</b> We’re pleased to share an excerpt from Chapter 2 of <a href=\"http://book.webtypography.net/\">Richard Rutter’s new book, <cite>Web Typography</cite></a>.</p><p>Good designers spend a great deal of time sweating over typography. They agonise over typefaces, iterate through type scales and meticulously apply white space, all in the service of the reader. Then comes along a table with the temptation to get creative, and all thoughts of the reader go out of the window. And yet tables are there to be read, referenced and used, not merely looked at.</p>\n<h2>Set tables as text to be read</h2>\n<p>Tables come in many forms. Some contain simple numbers, others are complex with mixtures of numeric data and textual information. Some require reading row by row, others are scanned vertically. The potential use for tables is as varied as the written word. They can be financial statements, bus timetables, multilanguage dictionaries, tables of contents, numerical conversions, pricing options, feature comparisons, technical specifications, and so on.</p>\n<p>Despite the huge variation in table size, complexity, contents and purpose, every table shares two simple design principles: they should be readable and support a sense of the data held within. They should not be prettied up to satisfy a sense of aesthetic when simply looked at. That said, a well-designed table can still be a thing of beauty but with the form following the function. Tables are not pictures of data: they are catalogues of data to be perused, parsed, referenced and interrogated. A well-designed table will enable the information to be read and understood, and will reveal the patterns and correlations inherent in the data. As Jan Tschichold, the virtuoso of typography design, put it in <cite>Asymmetric Typography</cite><sup data-footnote>1</sup>:</p>\n<figure>\n<blockquote>\n<p>Tabular matter need no longer be a rather unpleasant job to design: on the contrary, it can become a really charming and artistic exercise, in no way less interesting than any other area.</p>\n</blockquote>\n</figure>\n<p>Wherever possible plan the readability of every table in advance. Your design process should be an investigation into making the data undemanding to read, simple to follow and easy to extract.</p>\n<p>Just as you wouldn’t design body text with the aim of fitting as many words as possible on the screen, so you shouldn’t treat designing a table as an exercise in cramming as much data as possible into one space. You might be tempted to reduce the text size of your table – and if the data is entirely numeric you might be able to get away with it. Your reader should still be able to be comfortably read and interpret the table from their normal position, without needing to lean in.</p>\n<h3>Don’t stretch tables</h3>\n<p>Many designers will instinctively apply a width to their tables – just as they might an image – stretching them to fill the text column or page. And that is the appeal of setting tables full-width: you can make them look somewhat image-like when viewed from afar. However, while a table spread across the screen might look preferable from a distance, on closer inspection it will be harder to read as the data will be unnecessarily separated. To add insult to injury, tables set full-width are often replete with background colours and borders to give the table further the texture of an image, when what your reader really requires is the texture of text. For the sake of your readers, avoid these temptations.</p>\n<p>You might consider making all the columns an even width. This too does nothing for the readability of the contents. Some table cells will be too wide, leaving the data lost and detached from its neighbours. Other table cells will be too narrow, cramping the data uncomfortably. Table columns should be sized according to the data they contain. Columns of small numbers should be narrow, and columns of paragraphs should be relatively wide. This sounds like a lot of effort, and for a print designer it would be, as they would have to size each column manually in their layout software. Fortunately, web browsers are very clever when it comes to laying out tables and will do all that hard work for you. Browsers have been laying out tables automatically according to complex algorithms since long before <abbr>CSS</abbr> came along – just let them do their thing.</p>\n<h3>Keep table furniture and fills to a minimum</h3>\n<p>The statistician and information designer Edward Tufte introduced the concept of <dfn>data-ink</dfn> in his 1983 classic, <cite>The Visual Display of Quantitative Information</cite>. He defines data-ink as ‘the non-erasable core of the graphic’, whereas non-data-ink is the ink used in the graphic, not to directly represent data but for scales, labels, fills and edges. Tufte goes on to define the <dfn>data-ink ratio</dfn> as the proportion of ink that is used to present actual data compared to the total amount of ink used in the entire graphic. The goal is to design a graphic with the highest possible data-ink ratio (tending towards 1.0) without eliminating what is necessary for effective communication.</p>\n<p>Where Tufte talks about graphics he includes charts, diagrams and tables, and where he uses ‘ink’ we can think of pixels. In terms of tables, he’s saying that we should remove almost everything in the design which is not data or white space. Minimise furniture, maximise information. This is an ideal first principle to bear in mind when considering the <em>typographic</em> design of a table.</p>\n<p>As a starting point, avoid any border or frame surrounding the table. This is a Victorian embellishment which is entirely unnecessary as text alignment will shape the table just fine.</p>\n<p>Try to achieve a readable table using just alignment, spacing and grouping. Avoid zebra striping, tints and fills, and any other backgrounds. These can be superficially pretty but are usually a distraction. They serve to distort the meaning of the data by highlighting every other row to the detriment of neighbouring rows. Only use tints as a subtle means of guiding your reader’s eyes, and then only if you cannot arrange the data to that end. If you choose to tint, do so only in the primary direction of reading: down if lists, across otherwise.</p>\n<p>When it comes to lines and borders between rows and columns – typographically referred to as <dfn>rules</dfn> – the same applies: use them judiciously and preferably not at all. In <cite>Asymmetric Typography</cite> Jan Tschichold sums this up wonderfully:</p>\n<figure>\n<blockquote>\n<p>Tables should not be set to look like nets with every number enclosed. Try to do without rules altogether. They should be used only when they are absolutely necessary. Vertical rules are needed only when the space between columns is so narrow that mistakes will occur in reading without rules. Tables without vertical rules look better. Thin rules are better than thick ones.</p>\n</blockquote>\n</figure>\n<p>Avoid using row or column borders unless the data alignment, spacing and grouping are not sufficient to guide your reader’s eye. If you do need to use rules for this purpose, use them in one direction only and employ a lighter colour to reduce the impact of the lines: you are making a distinction, not constructing a barricade.</p>\n<h3>Left-align text, right-align numbers, and align headings with data</h3>\n<p>In the spirit of treating tables as artefacts to be read, don’t centre text within tables. Align table text as you would anywhere else; that is, aligned left. As text in tables tends to end up in narrow columns, don’t justify the text either – leave it ragged-right – or you will end up with rivers flowing down the tables, potentially causing confusion and certainly harming readability. You can hyphenate, however, particularly if the table columns would otherwise have a pronounced rag.</p>\n<p>Right-align numbers to help your reader make easier comparisons of magnitude when scanning down columns. To aid scanning in this manner you will need consistent precision of your numeric data; that is, use the same number of decimal places.</p>\n<p>For consistency and ease of understanding, match the alignment of headings to the alignment of the data. Right-align headings of numeric data and left-align headings of columns with text, for example:</p>\n<p> </p>\n<figure>\n<table>\n<thead>\n<tr>\n<th>Country</th>\n<th>Area</th>\n<th>Population</th>\n<th><abbr>GDP</abbr></th>\n<th>Capital</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Austria</td>\n<td>83,858</td>\n<td>8,169,929</td>\n<td>339</td>\n<td>Vienna</td>\n</tr>\n<tr>\n<td>Belgium</td>\n<td>30,528</td>\n<td>11,007,000</td>\n<td>410</td>\n<td>Brussels</td>\n</tr>\n<tr>\n<td>Denmark</td>\n<td>43,094</td>\n<td>5,564,219</td>\n<td>271</td>\n<td>Copenhagen</td>\n</tr>\n<tr>\n<td>France</td>\n<td>547,030</td>\n<td>66,104,000</td>\n<td>2,181</td>\n<td>Paris</td>\n</tr>\n<tr>\n<td>Germany</td>\n<td>357,021</td>\n<td>80,716,000</td>\n<td>3,032</td>\n<td>Berlin</td>\n</tr>\n<tr>\n<td>Greece</td>\n<td>131,957</td>\n<td>11,123,034</td>\n<td>176</td>\n<td>Athens</td>\n</tr>\n<tr>\n<td>Ireland</td>\n<td>70,280</td>\n<td>4,234,925</td>\n<td>255</td>\n<td>Dublin</td>\n</tr>\n<tr>\n<td>Italy</td>\n<td>301,230</td>\n<td>60,655,464</td>\n<td>1,642</td>\n<td>Rome</td>\n</tr>\n<tr>\n<td>Luxembourg</td>\n<td>2,586</td>\n<td>448,569</td>\n<td>51</td>\n<td>Luxembourg</td>\n</tr>\n<tr>\n<td>Netherlands</td>\n<td>41,526</td>\n<td>16,902,103</td>\n<td>676</td>\n<td>Amsterdam</td>\n</tr>\n<tr>\n<td>Portugal</td>\n<td>91,568</td>\n<td>10,409,995</td>\n<td>179</td>\n<td>Lisbon</td>\n</tr>\n<tr>\n<td>Spain</td>\n<td>504,851</td>\n<td>47,059,533</td>\n<td>1,075</td>\n<td>Madrid</td>\n</tr>\n<tr>\n<td>Sweden</td>\n<td>449,964</td>\n<td>9,090,113</td>\n<td>447</td>\n<td>Stockholm</td>\n</tr>\n<tr>\n<td>United Kingdom</td>\n<td>244,820</td>\n<td>65,110,000</td>\n<td>2,727</td>\n<td>London</td>\n</tr>\n</tbody>\n</table>\n</figure>\n<h3>Align to the decimal point</h3>\n<p>You may find yourself not having control of numerical precision, or perhaps the data you’re working with is rounded to the same <i>significant number</i> rather than adhering to the same precision. In this case, simply right-aligning a column of numbers will not help your reader scan down the column – small, high-precision numbers will look at first glance like a large number. Instead, align numbers to the decimal point. This will enable your reader to more readily compare magnitudes among a wider variety of data:</p>\n<pre><code>+-------------+\n| Call charge |\n+-------------+\n|     $1.30   |\n|     $2.50   |\n|    $10.80   |\n|   $111.01   |\n|    $85      |\n|    N/A      |\n|      $.05   |\n|      $.06   |\n+-------------+\n</code></pre>\n<p>Aligning to the decimal point was theoretically possible by using the <abbr>HTML 4</abbr> <code>char</code> attribute on a <code>&lt;td></code> tag, but in reality it was never supported. The modern way to align numbers to a decimal point (or to any character, in fact) is through a new value of the <code>text-align</code> property, although at the time of writing this is languishing in the <abbr>CSS</abbr> Text Level 4 Module<sup data-footnote>2</sup> and support is patchy at best.</p>\n<p>The syntax of the new value is simple. You include the alignment character (usually a full stop or comma) in quotes, followed by a space and your desired alignment keyword, which defaults to <code>right</code> if you omit it. For example, the following will centre the data and align to a decimal point as in our prior example:</p>\n<pre><code>td { text-align: &quot;.&quot; center; }</code></pre>\n<p>By specifying different alignment characters you can lay out more complex tables in a useful way; in this example, aligning digits to ‘×’ and ‘:’.</p>\n<figure>\n<table>\n<caption>Selected display standards</caption>\n<thead>\n<tr>\n<th>Video standard</th>\n<th colspan=\"3\">Resolution</th>\n<th>Pixels</th>\n<th colspan=\"3\">Aspect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><abbr>QQVGA</abbr></td>\n<td>160</td>\n<td>×</td>\n<td>120</td>\n<td>19k</td>\n<td>4</td>\n<td>:</td>\n<td>3</td>\n</tr>\n<tr>\n<td><abbr>HQVGA</abbr></td>\n<td>240</td>\n<td>×</td>\n<td>160</td>\n<td>38k</td>\n<td>3</td>\n<td>:</td>\n<td>2</td>\n</tr>\n<tr>\n<td><abbr>QVGA</abbr></td>\n<td>320</td>\n<td>×</td>\n<td>240</td>\n<td>76k</td>\n<td>4</td>\n<td>:</td>\n<td>3</td>\n</tr>\n<tr>\n<td><abbr>WQVGA</abbr></td>\n<td>480</td>\n<td>×</td>\n<td>272</td>\n<td>130k</td>\n<td>16</td>\n<td>:</td>\n<td>9</td>\n</tr>\n<tr>\n<td><abbr>VGA</abbr></td>\n<td>640</td>\n<td>×</td>\n<td>480</td>\n<td>307k</td>\n<td>4</td>\n<td>:</td>\n<td>3</td>\n</tr>\n<tr>\n<td><abbr>SVGA</abbr></td>\n<td>800</td>\n<td>×</td>\n<td>600</td>\n<td>480k</td>\n<td>4</td>\n<td>:</td>\n<td>3</td>\n</tr>\n<tr>\n<td><abbr>XGA</abbr></td>\n<td>1024</td>\n<td>×</td>\n<td>768</td>\n<td>786k</td>\n<td>4</td>\n<td>:</td>\n<td>3</td>\n</tr>\n<tr>\n<td><abbr>HD</abbr></td>\n<td>1260</td>\n<td>×</td>\n<td>768</td>\n<td>967k</td>\n<td>16</td>\n<td>:</td>\n<td>9</td>\n</tr>\n<tr>\n<td><abbr>WXGA</abbr></td>\n<td>1280</td>\n<td>×</td>\n<td>800</td>\n<td>1,024k</td>\n<td>16</td>\n<td>:</td>\n<td>10</td>\n</tr>\n<tr>\n<td><abbr>SXGA</abbr></td>\n<td>1280</td>\n<td>×</td>\n<td>1024</td>\n<td>1,310k</td>\n<td>5</td>\n<td>:</td>\n<td>4</td>\n</tr>\n<tr>\n<td><abbr>UXGA</abbr></td>\n<td>1600</td>\n<td>×</td>\n<td>1200</td>\n<td>1,920k</td>\n<td>4</td>\n<td>:</td>\n<td>3</td>\n</tr>\n<tr>\n<td><abbr>FHD</abbr></td>\n<td>1920</td>\n<td>×</td>\n<td>1080</td>\n<td>2,073k</td>\n<td>16</td>\n<td>:</td>\n<td>9</td>\n</tr>\n<tr>\n<td><abbr>DCI</abbr> 2K</td>\n<td>2048</td>\n<td>×</td>\n<td>1080</td>\n<td>2,211k</td>\n<td>19</td>\n<td>:</td>\n<td>10</td>\n</tr>\n<tr>\n<td><abbr>WQXGA</abbr></td>\n<td>2560</td>\n<td>×</td>\n<td>1600</td>\n<td>4,096k</td>\n<td>16</td>\n<td>:</td>\n<td>10</td>\n</tr>\n<tr>\n<td>4K <abbr>UHD</abbr></td>\n<td>3840</td>\n<td>×</td>\n<td>2160</td>\n<td>8,294k</td>\n<td>16</td>\n<td>:</td>\n<td>9</td>\n</tr>\n<tr>\n<td>8K <abbr>UHD</abbr></td>\n<td>7680</td>\n<td>×</td>\n<td>4320</td>\n<td>33,177k</td>\n<td>16</td>\n<td>:</td>\n<td>9</td>\n</tr>\n</tbody>\n</table>\n</figure>\n<h3>Use tabular lining numerals in tables of numbers</h3>\n<p>Many tables, such as financial statements or timetables, are made up mostly of numbers. Generally speaking, their purpose is to provide the reader with numeric data, presented in either columns or rows, and sometimes in a matrix of the two. Your reader may use the table by scanning down the columns, either searching for a data point or by making comparisons between numbers. Your reader may also make sense of the data by simply glancing at the column or row. It is far easier to compare numbers if the ones, tens and hundreds are all lined up vertically; that is, all the digits should occupy exactly the same width.</p>\n<p>Digits of the same width can inherently be found in monospaced fonts, and there is nothing wrong with choosing a suitable monospaced font to present a table of data (see ‘Combining typefaces’). However, many proportionally spaced fonts (those where a <i>1</i> is narrower than an <i>8</i>, and a <i>W</i> is wider than an <i>I</i>) also come with additional sets of figures which are monospaced. These are called <dfn>tabular numerals</dfn>. As well as being of equal width, tabular numerals will be subtly designed differently from the standard proportional numerals. For example, a <i>1</i> will normally have a bar for its base, and a <i>0</i> (zero) may be designed slightly narrower to better fit the chosen number width. Tabular numerals are usually available in old-style and lining variations. Use tabular lining numerals to provide your reader with the most effective way to reference vertically and horizontally in tables of data.</p>\n<figure>\n<img alt=\"A table of data\" src=\"http://alistapart.com/d/web-typography-tables/2-tables-numerals.svg\">\n<figcaption>Different numeral styles compared.</figcaption>\n</figure>\n<p>To specify tabular lining numerals, set the <code>font-variant-numeric</code> property with a value of <code>lining-nums</code> and <code>tabular-nums</code>:</p>\n<pre><code>table {\n    font-variant-numeric: lining-nums tabular-nums;\n}</code></pre>\n<p>The equivalent properties for legacy browsers requiring <code>font-feature-settings</code>, use the <code>lnum</code> and <code>tnum</code> OpenType feature tags.</p>\n<h4>Proportional numerals</h4>\n<p>If you need to specify proportional numerals, set the <code>font-variant-numeric</code> property with a value of <code>proportional-nums</code>. For legacy browsers requiring <code>font-feature-settings</code>, use the <code>pnum</code> OpenType feature tag.</p>\n<h3>Put white space to work to group and separate</h3>\n<p>Having eliminated rules and fills (borders and backgrounds) from your table, you will need to apply white space to your table so your reader can make sense of it. It is at this point that you should remove from your mind’s eye all visions of spreadsheets and other such uniform grids, and think instead in terms of typography and simple gestalt grouping principles.</p>\n<p>You will primarily need to separate the data so that each element can be individually identified and read as separate from the others. To have more control over the spacing, first collapse the spacing between borders:</p>\n<pre><code>table {\n    border-collapse: collapse;\n}</code></pre>\n<p>In traditional <abbr>HTML</abbr> tables, adjacent cells each have their own distinct borders which are separated from each other, with the separation still present even if the borders are not. In the collapsed border model, adjacent table cells share borders. As we are removing (almost) all cell borders, and any we retain will be single key lines, the collapsed border model is the most appropriate.</p>\n<p>Now apply padding to the table cells to separate the data. You’ll find that adding a smaller amount of padding to the top of the cell is a useful way to provide a visually balanced separation from the rows above and below. To ensure everything lines up nicely, apply the same padding to heading cells as to data cells. Because line lengths are often very short in tables, you can reduce the line height right down. In the following example, we’ve removed all additional line spacing, but you may need more depending on your choice of font and the amount of text in the table cells.</p>\n<pre><code>td, th {\n    padding: 0.125em 0.5em 0.25em 0.5em;\n    line-height: 1;\n}</code></pre>\n<p>The gestalt grouping principles most useful in tables are those of proximity and similarity. Move related data closer together to be distinct from other data; in other words, space apart groups of rows or columns. A by-product of grouping rows is that the data becomes much easier to scan and refer to than if the table consisted of a succession of undifferentiated rows. Ensure data of a similar content or meaning look similar at a glance, which you can do through alignment, colour and font style.</p>\n<h4>Table captions</h4>\n<p>We will attend to the typographic specifics of table captions in ‘Choosing typefaces for functional text’ but it’s worth noting now how to mark up captions for tables. If you are choosing to place your table inside a <code>&lt;figure></code> element, which is a perfectly reasonable thing to do, then use a <code>&lt;figcaption></code> element before or after the table. If your table is not inside a <code>&lt;figure></code> element, or you have multiple items in the figure, use the aptly named <code>&lt;caption></code> element, which <abbr>HTML</abbr> provides specifically for tables. Always write the <code>&lt;caption></code> tag immediately after the opening <code>&lt;table></code> tag and before any table data, like this:</p>\n<pre><code>&lt;table>\n    &lt;caption>\n    Imperial to metric conversion factors\n    &lt;p>&lt;i>Values are given to three significant figures&lt;/i>&lt;/p>\n    &lt;/caption>\n    &lt;thead> … &lt;/thead>\n    &lt;tbody> … &lt;/tbody>\n&lt;/table></code></pre>\n<p>You can position the caption either above or below the table using the <code>caption-side</code> property and a corresponding value of either <code>top</code> or <code>bottom</code>.</p>\n<pre><code>caption { caption-side: bottom; }</code></pre>\n<p>The following table shows a caption and demonstrates gestalt grouping principles by separating the data into related rows:</p>\n<figure>\n<table>\n<caption>Imperial to metric conversion factors\n<p><i>Values are given to three significant figures unless exact</i></p>\n</caption>\n<thead>\n<tr>\n<th></th>\n<th>To convert</th>\n<th>into</th>\n<th>multiply by</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<th rowspan=\"4\">Length</th>\n<td>inches</td>\n<td>millimetres (mm)</td>\n<td>25.4</td>\n</tr>\n<tr>\n<td>feet</td>\n<td>centimetres (cm)</td>\n<td>30.48</td>\n</tr>\n<tr>\n<td>yards</td>\n<td>metres (m)</td>\n<td>0.91444</td>\n</tr>\n<tr>\n<td>miles</td>\n<td>kilometres (km)</td>\n<td>1.61</td>\n</tr>\n<tr>\n<th rowspan=\"4\">Area</th>\n<td>square inches</td>\n<td>sq. millimetres (mm²)</td>\n<td>645</td>\n</tr>\n<tr>\n<td>square feet</td>\n<td>square metres (m²)</td>\n<td>0.0929</td>\n</tr>\n<tr>\n<td>square yards</td>\n<td>square metres (m²)</td>\n<td>0.836</td>\n</tr>\n<tr>\n<td>acres</td>\n<td>hectares</td>\n<td>2.47</td>\n</tr>\n<tr>\n<th rowspan=\"4\">Volume</th>\n<td>cubic inches</td>\n<td>millitres (ml)</td>\n<td>16.4</td>\n</tr>\n<tr>\n<td>cubic feet</td>\n<td>litres</td>\n<td>28.3</td>\n</tr>\n<tr>\n<td>imperial gallons</td>\n<td>litres</td>\n<td>4.55</td>\n</tr>\n<tr>\n<td><abbr>US</abbr> barrels</td>\n<td>cubic metres (m³)</td>\n<td>0.159</td>\n</tr>\n</tbody>\n</table>\n</figure>\n<p>Note that, in this example, the numbers do not align to the decimal point. This is because the purpose of the table is for the reader to easily identify and extract a multiplication factor. In this instance there is no obvious use case for comparing the relative magnitudes of the factors, which is when decimal alignment would be useful.</p>\n<h3>Do not over-stylise tables</h3>\n<p>The French writer-aviator Antoine de Saint-Exupéry wrote<sup data-footnote>3</sup> <q>perfection is attained not when there is nothing more to add, but when there is no longer anything to take away.</q> Quoting de Saint-Exupéry may have become a cliché, but his idiom is entirely apt when applied to table design. There is no need to make a table look like a spreadsheet. A spreadsheet is a tool unto itself; a table is for presenting data and information that can be read. Spreadsheet software offers a multitude of options for table styles, which add text formatting, borders, background fills and all manner of ornament. They may make pretty pictures but do nothing for table readability, so do not try to emulate them. Tables can be beautiful but they are not works of art. Instead of painting and decorating them, design tables for your reader.</p>\n<figure>\n<img alt=\"Initial badly designed table\" src=\"http://alistapart.com/d/web-typography-tables/2-tables-table-0.svg\">\n<figcaption>A typical spreadsheet-styled table set full-width with borders, fills and centred alignment.</figcaption>\n</figure>\n<figure>\n<img alt=\"Table design progressed\" src=\"http://alistapart.com/d/web-typography-tables/2-tables-table-1.svg\">\n<figcaption>1. Remove stretch and size columns to data.</figcaption>\n</figure>\n<figure>\n<img alt=\"Table design progressed\" src=\"http://alistapart.com/d/web-typography-tables/2-tables-table-2.svg\">\n<figcaption>2. Remove fills, gridlines, border and bolding.</figcaption>\n</figure>\n<figure>\n<img alt=\"Table design progressed\" src=\"http://alistapart.com/d/web-typography-tables/2-tables-table-3.svg\">\n<figcaption>3. Left-align text, right-align numbers and align headings with data.</figcaption>\n</figure>\n<figure>\n<img alt=\"Table design progressed\" src=\"http://alistapart.com/d/web-typography-tables/2-tables-table-4.svg\">\n<figcaption>4. Put white space to work to group and separate.</figcaption>\n</figure>\n<figure>\n<img alt=\"Table design progressed\" src=\"http://alistapart.com/d/web-typography-tables/2-tables-table-5.svg\">\n<figcaption>5. Use tabular lining numerals, consistent precision, and remove repetition.</figcaption>\n</figure>\n<h3>Adapt tables to small screens</h3>\n<p>Tables regularly require a fair bit of horizontal space to display the information they contain. Even when judiciously designed and edited, a typical table may need to be wider than the 45–75 characters we normally allow for paragraphs of text. For small screens, such as phones, designing readable tables which work under such cramped conditions presents us with a serious challenge. The best approaches always deal with each table on case-by-case basis, but that’s not always possible if we need to generically style whatever comes out of a <abbr>CMS</abbr> database.</p>\n<p>One immediate approach is to use either a condensed font <em>or</em> a slightly smaller size (but not both smaller and condensed). In both cases, readability must remain paramount and other options should also be explored.</p>\n<h4>Consider setting oblique headings to save space</h4>\n<p>One way to save horizontal space, particularly when you have short pieces of data but long headings, is to set the headings at an oblique angle.</p>\n<figure>\n<img alt=\"A table showing Fahrenheit against Celsius with oblique headings.\" src=\"http://alistapart.com/d/web-typography-tables/2-tables-oblique-headings.png\">\n<figcaption>Using oblique headings to save space.</figcaption>\n</figure>\n<p>You can use a simple <abbr>CSS</abbr> translation to achieve the effect. You will also need to absolutely position the headings so the original width of the columns isn’t retained and they shrink to wrap the data instead.</p>\n<pre><code>th {\n    transform-origin: bottom left;\n    position: absolute;\n}\nth.degC {\n    transform: translate(2.58em,-2em) rotate(-60deg);\n}\nth.degF {\n    transform: translate(5.14em,-2em) rotate(-60deg);\n}</code></pre>\n<h4>Let the browser handle tables with horizontal scrolling</h4>\n<p>The simplest solution to help tables of any size and complexity is to let the browser lay out the table as best it can and render part of the table off-screen as necessary. Provided you then enable your reader to scroll the table sideways independently of the rest of the text, the table can be relatively easily brought into view.</p>\n<figure>\n<img alt=\"A table wider than a phone’s screen\" src=\"http://alistapart.com/d/web-typography-tables/2-tables-crawl.svg\">\n<figcaption>Using a crawl bar to scroll a table into view.</figcaption>\n</figure>\n<p>To do this, first wrap your table in a <code>&lt;figure></code> element:</p>\n<pre><code>&lt;figure class=&quot;fig-table&quot;>\n&lt;table> … &lt;/table>\n&lt;/figure></code></pre>\n<p>Then apply the following simple rules to hide the portion of the table off-screen and enable your reader to scroll the table without affecting the rest of the text:</p>\n<pre><code>.fig-table {\n    max-width: 100%;\n    overflow-x: scroll;\n}</code></pre>\n<p>It is important not to set a width on your table; the browser can then compress the table as far as it can before overflowing off the screen. To preserve readability, make good use of non-breaking spaces and <code>white-space:nowrap</code> to limit the amount the data wraps in the cells. It’s better to have a readable table that requires scrolling than an unreadable one which doesn’t.</p>\n<h4>Linearise simple tables into lists</h4>\n<p>You can safely linearise simple data tables when space is limited. The tables most suitable for this treatment are lists of structured data; for example, an employee directory:</p>\n<figure>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Email</th>\n<th>Title</th>\n<th>Phone</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<th data-title=\"Name\">Jones, Claire</th>\n<td data-title=\"Email\">claire.jones​@domain.com</td>\n<td data-title=\"Title\">Managing Director</td>\n<td data-title=\"Phone\">01234 567890</td>\n</tr>\n<tr>\n<th data-title=\"Name\">Smith, Darren</th>\n<td data-title=\"Email\">darren.smith​@domain.com</td>\n<td data-title=\"Title\">Head of Sales</td>\n<td data-title=\"Phone\">01234 567891</td>\n</tr>\n</tbody>\n</table>\n</figure>\n<p>When there is not enough room for the table to render comfortably, we can set it with a completely different layout. This is less compact overall, and takes more space vertically, but it succeeds in fitting the table into a much narrower viewport:</p>\n<figure>\n<table>\n<tbody><tr><th>Name:</th>\n<th data-title=\"Name\">Jones, Claire</th>\n</tr>\n<tr><td>Email:</td>\n<td data-title=\"Email\">claire.jones@domain.com</td>\n</tr>\n<tr><td>Title:</td>\n<td data-title=\"Title\">Managing Director</td>\n</tr>\n<tr><td>Phone:</td>\n<td data-title=\"Phone\">01234 567890</td>\n</tr>\n</tbody>\n</table>\n<table>\n<tbody><tr><th>Name:</th>\n<th data-title=\"Name\">Smith, Darren</th>\n</tr>\n<tr><td>Email:</td>\n<td data-title=\"Email\">darren.smith@domain.com</td>\n</tr>\n<tr><td>Title:</td>\n<td data-title=\"Title\">Head of Sales</td>\n</tr>\n<tr><td>Phone:</td>\n<td data-title=\"Phone\">01234 567891</td>\n</tr>\n</tbody>\n</table>\n</figure>\n<p>The two renderings of our employee directory table use exactly the same markup, comprising the conventional <abbr>HTML</abbr> elements you would expect in any table. The one addition is a <code>data-title</code> attribute on each cell enabling us to repeat the label in the list view, should we need to.</p>\n<pre><code>&lt;th data-title=&quot;Name&quot;>Jones, Claire&lt;/th>\n&lt;td data-title=&quot;Email&quot;>claire.jones@domain.com&lt;/td>\n&lt;td data-title=&quot;Title&quot;>Managing Director&lt;/td>\n&lt;td data-title=&quot;Phone&quot;>01234&amp;nbsp;567890&lt;/td></code></pre>\n<p>There are four simple steps to turning the table into a list, using a media query and <abbr>CSS</abbr> (no JavaScript is required).</p>\n<ol>\n<li>Identify the viewport width at which the table starts to render poorly.</li>\n<li>Apply <code>display:block</code> to all table-related elements so they align vertically instead of as a table.</li>\n<li>Hide the header row and any empty cells.</li>\n<li>Display labels for each data item (optional).</li>\n</ol>\n<p>You will need to apply some additional styling for aesthetics and readability, but the responsiveness described can be accomplished in these few lines of <abbr>CSS</abbr>:</p>\n<pre><code>@media (max-width: 25em) {\n  table, caption, tbody, tr, th, td {\n    display: block;\n    text-align: left;\n  }\n  thead, th:empty, td:empty {\n    display: none;\n    visibility: hidden;\n  }\n  th[data-title]:before, td[data-title]:before {\n    content: attr(data-title) &quot;: &quot;;\n    display: inline-block;\n    width: 3.5em;\n  }\n}</code></pre>\n<p>This technique was first popularised by Aaron Gustafson<sup data-footnote>4</sup>.</p>\n<h4>Make tables responsive according to their purpose</h4>\n<p>There are many different techniques<sup data-footnote>5</sup> available for making data tables responsive. Some are simple <abbr>CSS</abbr>-only methods (we’ve covered two already); others are complex, enhanced by JavaScript. When considering which technique to use, ask yourself how your reader will use the table. In particular, consider if your reader is likely to compare either rows or columns – these kinds of tables need extra attention owing to the way they are used.</p>\n<p>When being able to compare columns is important, one method is to hide non-essential fields and provide an option to turn them back on. This technique was popularised by Filament Group<sup data-footnote>6</sup> using a stocks table as an example:</p>\n<figure>\n<img alt=\"Table with 7 rows and 9 columns of stocks data\" src=\"http://alistapart.com/d/web-typography-tables/2-tables-tablesaw1.png\">\n<figcaption>A data-rich table as rendered on a large screen.</figcaption>\n</figure>\n<figure>\n<img alt=\"Table with 7 rows, 2 columns of stocks data\" src=\"http://alistapart.com/d/web-typography-tables/2-tables-tablesaw2b.png\">\n<figcaption>The same table with hidden columns and options to toggle.</figcaption>\n</figure>\n<p>Tables are a frequently overlooked aspect of reading, sometimes overstyled, sometimes poorly thought out. Responsiveness is a particularly thorny issue as the best solutions depend very much on the utility of the table. Tables can be packed with data, rich in content and meaning. Give them the attention they deserve.</p>\n<h2>Want to read more?</h2>\n<p>This excerpt from <cite>Web Typography</cite> will help you get started. <a href=\"http://book.webtypography.net/\">Order the full copy today</a>.</p>\n<figure>\n<img alt=\"Cover of Web Typography\" src=\"http://alistapart.com/d/web-typography-numbers/cover.png\">\n</figure><h3>Footnotes</h3><ul><li>1. <cite>Asymmetric Typography</cite> by Jan Tschichold (1967, after 1935 original).</li><li>2. <a href=\"https://drafts.csswg.org/css-text-4/#character-alignment\">Character-based Alignment in a Table Column</a><span> (http://wbtyp.net/103)</span> in the <abbr>CSS</abbr> Text Module Level 4.</li><li>3. <cite>Terre des Hommes</cite> (translated into English as <cite>Wind, Sand and Stars</cite>) by Antoine de Saint-Exupéry (1939).</li><li>4. ‘<a href=\"http://blog.easy-designs.net/archives/responsive-tables/\">Responsive Tables</a>’<span> (http://wbtyp.net/16)</span> by Aaron Gustafson on <cite>Easy Designs blog</cite> (2013).</li><li>5. See <span><abbr>CSS</abbr>-Tricks’</span> ‘<a href=\"https://css-tricks.com/tag/responsive-tables/\">Responsive Tables</a>’<span> (http://wbtyp.net/148)</span> for the latest options.</li><li>6. Filament Group’s ‘<a href=\"https://github.com/filamentgroup/tablesaw\">Tablesaw</a>’<span> (http://wbtyp.net/15)</span> responsive table plug-ins.</li></ul><img width=\"1\" alt=\"\" src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/TaASsGZR1Rg\" height=\"1\">",
        "direction": "ltr"
      },
      "visual": {
        "url": "none"
      },
      "unread": false,
      "categories": [
        {
          "id": "user/b26d0114-b165-4328-b921-8bfda7fbc193/category/design-dev",
          "label": "design-dev"
        }
      ],
      "engagement": 557
    }
  ]
}
